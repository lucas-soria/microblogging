// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=tweets
//

// Package tweets is a generated GoMock package.
package tweets

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTweet mocks base method.
func (m *MockService) CreateTweet(ctx context.Context, req *Tweet) (*Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", ctx, req)
	ret0, _ := ret[0].(*Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockServiceMockRecorder) CreateTweet(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockService)(nil).CreateTweet), ctx, req)
}

// DeleteTweet mocks base method.
func (m *MockService) DeleteTweet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTweet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockServiceMockRecorder) DeleteTweet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockService)(nil).DeleteTweet), ctx, id)
}

// GetTweet mocks base method.
func (m *MockService) GetTweet(ctx context.Context, id string) (*Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweet", ctx, id)
	ret0, _ := ret[0].(*Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTweet indicates an expected call of GetTweet.
func (mr *MockServiceMockRecorder) GetTweet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweet", reflect.TypeOf((*MockService)(nil).GetTweet), ctx, id)
}

// GetUserTweets mocks base method.
func (m *MockService) GetUserTweets(ctx context.Context, userID string) ([]*Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTweets", ctx, userID)
	ret0, _ := ret[0].([]*Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTweets indicates an expected call of GetUserTweets.
func (mr *MockServiceMockRecorder) GetUserTweets(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTweets", reflect.TypeOf((*MockService)(nil).GetUserTweets), ctx, userID)
}
