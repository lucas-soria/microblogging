// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=analytics
//

// Package analytics is a generated GoMock package.
package analytics

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteUserAnalytics mocks base method.
func (m *MockRepository) DeleteUserAnalytics(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAnalytics", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAnalytics indicates an expected call of DeleteUserAnalytics.
func (mr *MockRepositoryMockRecorder) DeleteUserAnalytics(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAnalytics", reflect.TypeOf((*MockRepository)(nil).DeleteUserAnalytics), ctx, userID)
}

// GetAllUserAnalytics mocks base method.
func (m *MockRepository) GetAllUserAnalytics(ctx context.Context) ([]*UserAnalytics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserAnalytics", ctx)
	ret0, _ := ret[0].([]*UserAnalytics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserAnalytics indicates an expected call of GetAllUserAnalytics.
func (mr *MockRepositoryMockRecorder) GetAllUserAnalytics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserAnalytics", reflect.TypeOf((*MockRepository)(nil).GetAllUserAnalytics), ctx)
}

// GetUserAnalytics mocks base method.
func (m *MockRepository) GetUserAnalytics(ctx context.Context, userID string) (*UserAnalytics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAnalytics", ctx, userID)
	ret0, _ := ret[0].(*UserAnalytics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAnalytics indicates an expected call of GetUserAnalytics.
func (mr *MockRepositoryMockRecorder) GetUserAnalytics(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAnalytics", reflect.TypeOf((*MockRepository)(nil).GetUserAnalytics), ctx, userID)
}

// ProcessEvent mocks base method.
func (m *MockRepository) ProcessEvent(ctx context.Context, event *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessEvent indicates an expected call of ProcessEvent.
func (mr *MockRepositoryMockRecorder) ProcessEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvent", reflect.TypeOf((*MockRepository)(nil).ProcessEvent), ctx, event)
}
