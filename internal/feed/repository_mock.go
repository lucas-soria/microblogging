// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=feed
//

// Package feed is a generated GoMock package.
package feed

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserTimeline mocks base method.
func (m *MockRepository) GetUserTimeline(ctx context.Context, userID string, limit, offset int) ([]*Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTimeline", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTimeline indicates an expected call of GetUserTimeline.
func (mr *MockRepositoryMockRecorder) GetUserTimeline(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTimeline", reflect.TypeOf((*MockRepository)(nil).GetUserTimeline), ctx, userID, limit, offset)
}
