// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=users
//

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, handler string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, handler)
}

// FollowUser mocks base method.
func (m *MockUserRepository) FollowUser(ctx context.Context, followRequest FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", ctx, followRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockUserRepositoryMockRecorder) FollowUser(ctx, followRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUserRepository)(nil).FollowUser), ctx, followRequest)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, handler string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, handler)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, handler)
}

// GetUserFollowers mocks base method.
func (m *MockUserRepository) GetUserFollowers(ctx context.Context, handler string) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowers", ctx, handler)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowers indicates an expected call of GetUserFollowers.
func (mr *MockUserRepositoryMockRecorder) GetUserFollowers(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowers", reflect.TypeOf((*MockUserRepository)(nil).GetUserFollowers), ctx, handler)
}

// GetUserFollowing mocks base method.
func (m *MockUserRepository) GetUserFollowing(ctx context.Context, handler string) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowing", ctx, handler)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowing indicates an expected call of GetUserFollowing.
func (mr *MockUserRepositoryMockRecorder) GetUserFollowing(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowing", reflect.TypeOf((*MockUserRepository)(nil).GetUserFollowing), ctx, handler)
}

// UnfollowUser mocks base method.
func (m *MockUserRepository) UnfollowUser(ctx context.Context, followRequest FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowUser", ctx, followRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockUserRepositoryMockRecorder) UnfollowUser(ctx, followRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockUserRepository)(nil).UnfollowUser), ctx, followRequest)
}
