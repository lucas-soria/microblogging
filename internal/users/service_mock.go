// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=users
//

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, user *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, id)
}

// FollowUser mocks base method.
func (m *MockUserService) FollowUser(ctx context.Context, req FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockUserServiceMockRecorder) FollowUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUserService)(nil).FollowUser), ctx, req)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(ctx context.Context, id string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), ctx, id)
}

// GetUserFollowees mocks base method.
func (m *MockUserService) GetUserFollowees(ctx context.Context, userID string) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowees", ctx, userID)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowees indicates an expected call of GetUserFollowees.
func (mr *MockUserServiceMockRecorder) GetUserFollowees(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowees", reflect.TypeOf((*MockUserService)(nil).GetUserFollowees), ctx, userID)
}

// GetUserFollowers mocks base method.
func (m *MockUserService) GetUserFollowers(ctx context.Context, userID string) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowers", ctx, userID)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowers indicates an expected call of GetUserFollowers.
func (mr *MockUserServiceMockRecorder) GetUserFollowers(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowers", reflect.TypeOf((*MockUserService)(nil).GetUserFollowers), ctx, userID)
}

// UnfollowUser mocks base method.
func (m *MockUserService) UnfollowUser(ctx context.Context, req FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockUserServiceMockRecorder) UnfollowUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockUserService)(nil).UnfollowUser), ctx, req)
}
